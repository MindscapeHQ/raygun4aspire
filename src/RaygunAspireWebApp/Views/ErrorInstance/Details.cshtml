@model ErrorInstanceViewModel

<script src="~/js/htmx.min.js"></script>
<script src="~/js/moment.min.js"></script>
<script src="~/js/signalr.min.js"></script>

@{
  string BuildHeading(string className, string message)
  {
    var heading = "";

    if (!string.IsNullOrWhiteSpace(className))
    {
      heading = $"{className}: ";
    }

    if (!string.IsNullOrWhiteSpace(message))
    {
      heading += message;
    }
    else
    {
      heading += "Unknown error";
    }

    return heading;
  }
}

<div class="margin--24">
  <div class="error-header">
    <h2 class="font-opensans--18--28--600 color--color-text-default">
      @BuildHeading(Model?.RaygunMessage?.Details?.Error?.ClassName, Model?.RaygunMessage?.Details?.Error?.Message)
    </h2>

    <button id="ai-error-res-btn" class="rg" onclick="handleAIChatOpened()">
      <i id="ai-res-icon" class="ai-small"></i>
      AI Error Resolution
    </button>
  </div>
  <p id="occurredOnHeading" class="font-opensans--14--32--600 color--color-text-low-emphasis">@Model.RaygunMessage.OccurredOn.ToString("MM/dd/yyyy hh:mm:ss")</p>

  <ul id="js-lowest-prechat-elem" class="tab-group clearfix font-opensans--14--32--600 color--color-text-default margin-top--24">
    <li class="js-tab-item tab-group--item tab-group--item--active" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "summary"}'>Summary</li>
    @if (Model?.RaygunMessage?.Details?.Request != null || Model?.RaygunMessage?.Details?.Response != null)
    {
      <li class="js-tab-item tab-group--item" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "http"}'>Http</li>
    }
    <li class="js-tab-item tab-group--item tab-group--item-last" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "rawdata"}'>Raw data</li>
  </ul>
  <div id="tab-and-chat" class="display--flex">
    <div id="tab-content" class="background--color-bg-surface-01 box-shadow--tabs border-color--color-border-elevation border-width--1 border-style--solid">
      <partial name="Tabs/_summary" model="@Model"/>
    </div>
    <div id="ai-chat-container" class="ai-chat-elem background-color--color-bg-surface-01 box-shadow--tabs border-color--color-border-elevation border-width--1 border-style--solid display--none">
      <partial name="AIChatWindow"/>
    </div>
  </div>
</div>

<script>
  // Format the occurred on date in the header
  var occurredOnHeading = document.getElementById('occurredOnHeading');
  var rawDate = occurredOnHeading.textContent;
  var momentDateUtc = moment.utc(rawDate);

  var formattedDateUtc = momentDateUtc.format("MMMM Do YYYY, HH:mm:ss") + " UTC";
  occurredOnHeading.title = formattedDateUtc

  var momentDateLocal = momentDateUtc.local();
  var formattedDate = momentDateLocal.format("MMMM Do YYYY, HH:mm:ss") + " - " + momentDateLocal.fromNow();
  occurredOnHeading.textContent = formattedDate;

  // Add a click event listener to each tab item
  var elements = document.querySelectorAll('.js-tab-item');
  elements.forEach(function (element) {
    element.addEventListener('click', function () {
      // Remove the 'active' class from all elements
      elements.forEach(function (el) {
        el.classList.remove('tab-group--item--active');
      });

      // Add the 'active' class to the clicked element
      element.classList.add('tab-group--item--active');
    });
  });
</script>

<script>
  let aierInProgress = false;

  window.addEventListener('beforeunload', function (event) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '/ErrorInstance/CancelAIER', true);
    xhr.send();
  });

  function handleAIChatOpened() {
    document.getElementById("tab-content").classList.add("width--half");
    
    setChatWindowDimensions();

    document.addEventListener('htmx:afterSettle', setChatWindowDimensions);
    window.addEventListener('resize', setChatWindowDimensions);
    window.addEventListener('scroll', setChatWindowDimensions);
    
    document.getElementById("ai-chat-container").classList.remove("display--none");

    document.getElementById("ai-error-res-btn").disabled = true;
    document.getElementById("ai-res-icon").style.backgroundColor = "var(--color-text-button-disabled)";
    
    let aierChatStarted = sessionStorage.getItem('aierChatStarted');
    if (!aierInProgress) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/ErrorInstance/AIER', true);
      xhr.send();

      sessionStorage.setItem('aierChatStarted', 'true');
      aierInProgress = true;
    }
  }
  
  function setChatWindowDimensions() {
    setChatWindowWidth();
    setChatWindowHeight();
    giveChatWindowBottomMargin();
  }
  
  function setChatWindowHeight() {
    var container = document.getElementById("ai-chat-container");
    
    if (container) { 
      container.style.height = getChatWindowHeight();
    }
  }
  
  function giveChatWindowBottomMargin() {
    var container = document.getElementById("ai-chat-container");
    
    if (container) { 
      container.style.marginBottom = visibleMargin().toString() + "px";
    }
  }
  
  function visibleMargin() {
    const footer = document.getElementById('js-footer-elem');
    const footerRect = footer.getBoundingClientRect();

    return Math.max(window.innerHeight - (footerRect.top - 52), 0);
  }
  
  function setChatWindowWidth() {
    var width = $("#tab-content").width();

    // Set the width of the second element
    $("#ai-chat-container").width(width);
  }
  
  function getChatWindowHeight() {
    const errorTabs = document.getElementById('js-lowest-prechat-elem');
    const header = document.getElementById('js-header-elem');
    const footer = document.getElementById('js-footer-elem');

    const errorRect = errorTabs.getBoundingClientRect();
    const headerRect = header.getBoundingClientRect();
    const footerRect = footer.getBoundingClientRect();

    const errorBottom = errorRect.top + errorRect.height;
    const headerBottom = headerRect.top + headerRect.height;

    const top = Math.max(errorBottom, headerBottom);
    const bottom = Math.min(footerRect.top - 52, window.innerHeight);

    let height = bottom - top + 1;

    return height.toString() + "px";
  }
</script>

<script>
  const connection = new signalR.HubConnectionBuilder().withUrl("/aierHub").build();
  connection.on("ReceiveText", function (text) {
    document.getElementById("messagesList").textContent += text;
  });

  connection.start().catch(function (err) {
    return console.error(err.toString());
  });
</script>